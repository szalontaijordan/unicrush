// Generated by delombok at Tue Mar 27 14:13:16 GMT 2018
package jordan.szalontai.unicrush;

import java.util.Arrays;

public abstract class Level {
    public static final String[] MESSAGES = {"Sweet", "Delicious", "Divine", "Tasty"};
    private int boardSize;
    private int availableSteps;
    private int scoreToComplete;
    private boolean transposed;
    protected Integer[][] walls;
    protected Candy[][] board;

    public Level() {
    }

    public Level(int scoreToComplete, int steps, int boardSize, String walls) {
        this.scoreToComplete = scoreToComplete;
        this.availableSteps = steps;
        this.boardSize = boardSize;
        this.board = new Candy[boardSize][boardSize];
        this.transposed = false;
    }

    public Candy get(int i, int j) {
        try {
            if (transposed) {
                return board[j][i];
            } else {
                return board[i][j];
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            return null;
        }
    }

    public void transpose() {
        this.transposed = !this.transposed;
    }

    public void set(int i, int j, Candy c) throws ArrayIndexOutOfBoundsException {
        if (transposed) {
            board[j][i] = c;
        } else {
            board[i][j] = c;
        }
    }

    public boolean swap(Integer[][] coors) {
        boolean success = testSwap(coors);
        if (!success) {
            return false;
        }
        Candy tmp = board[coors[0][0]][coors[0][1]];
        board[coors[0][0]][coors[0][1]] = board[coors[1][0]][coors[1][1]];
        board[coors[1][0]][coors[1][1]] = tmp;
        return true;
    }

    private boolean testSwap(Integer[][] coors) {
        return Math.abs(coors[0][0] - coors[1][0]) + Math.abs(coors[0][1] - coors[1][1]) == 1;
    }

    public String getBoardState() {
        return Arrays.stream(board).map(row -> Arrays.toString(row).replaceAll("\\W", "").replaceAll("null", "x")).reduce("", (sum, current) -> sum.concat(current).concat(";"));
    }

    @Override
    public String toString() {
        return Arrays.stream(board).map(row -> Arrays.toString(row).replaceAll("null", "x").replaceAll("E", " ")).reduce("", (output, currentRow) -> output += currentRow + "\n");
    }

    public static String getMessage() {
        return MESSAGES[(int) (Math.random() * MESSAGES.length)];
    }

    @java.lang.SuppressWarnings("all")
    public int getBoardSize() {
        return this.boardSize;
    }

    @java.lang.SuppressWarnings("all")
    public int getAvailableSteps() {
        return this.availableSteps;
    }

    @java.lang.SuppressWarnings("all")
    public int getScoreToComplete() {
        return this.scoreToComplete;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isTransposed() {
        return this.transposed;
    }

    @java.lang.SuppressWarnings("all")
    public Integer[][] getWalls() {
        return this.walls;
    }

    @java.lang.SuppressWarnings("all")
    public Candy[][] getBoard() {
        return this.board;
    }

    @java.lang.SuppressWarnings("all")
    public void setBoardSize(final int boardSize) {
        this.boardSize = boardSize;
    }

    @java.lang.SuppressWarnings("all")
    public void setAvailableSteps(final int availableSteps) {
        this.availableSteps = availableSteps;
    }

    @java.lang.SuppressWarnings("all")
    public void setScoreToComplete(final int scoreToComplete) {
        this.scoreToComplete = scoreToComplete;
    }

    @java.lang.SuppressWarnings("all")
    public void setTransposed(final boolean transposed) {
        this.transposed = transposed;
    }

    @java.lang.SuppressWarnings("all")
    public void setWalls(final Integer[][] walls) {
        this.walls = walls;
    }

    @java.lang.SuppressWarnings("all")
    public void setBoard(final Candy[][] board) {
        this.board = board;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Level)) return false;
        final Level other = (Level) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getBoardSize() != other.getBoardSize()) return false;
        if (this.getAvailableSteps() != other.getAvailableSteps()) return false;
        if (this.getScoreToComplete() != other.getScoreToComplete()) return false;
        if (this.isTransposed() != other.isTransposed()) return false;
        if (!java.util.Arrays.deepEquals(this.getWalls(), other.getWalls())) return false;
        if (!java.util.Arrays.deepEquals(this.getBoard(), other.getBoard())) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Level;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getBoardSize();
        result = result * PRIME + this.getAvailableSteps();
        result = result * PRIME + this.getScoreToComplete();
        result = result * PRIME + (this.isTransposed() ? 79 : 97);
        result = result * PRIME + java.util.Arrays.deepHashCode(this.getWalls());
        result = result * PRIME + java.util.Arrays.deepHashCode(this.getBoard());
        return result;
    }
}
